const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');
const path = require('path');
const { checkTLD, checkKeywords, checkPatterns } = require('./utils/heuristics');

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, '..', 'public')));

app.post('/analyze', async (req, res) => {
  const { url } = req.body;
  const reasons = [];
  let progress = 0;
  let score = 100;

  // Basic URL validation
  try {
    new URL(url);
  } catch (e) {
    return res.status(400).json({ error: 'Invalid URL format' });
  }

  try {
    // Fetch the HTML content of the provided URL
    //const response = await axios.get(url);
    //using the following to bypass site blocks such as third party access or firewalls.
    const response = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'
      }
    });   
    const htmlContent = response.data;

    // Check TLD
    const tldReason = checkTLD(url);
    if (tldReason) { reasons.push(tldReason); score -= 30; }
    progress = 33;

    // Check for keywords in the fetched HTML content
    const keywordReasons = checkKeywords(htmlContent);
    if (keywordReasons.length > 0) { reasons.push(...keywordReasons); score -= keywordReasons.length * 10; }
    progress = 66;

    // Check URL patterns
    const patternReasons = checkPatterns(url);
    if (patternReasons.length > 0) { reasons.push(...patternReasons); score -= patternReasons.length * 10; }
    progress = 100;

    // Determine verdict
    const verdict = score < 70 ? 'suspicious' : 'safe';

    // Send response
    res.json({ verdict, progress, score, reasons });
  } catch (error) {
    console.error('Error fetching URL:', error.message);
    res.status(500).json({ error: 'Failed to fetch URL content. The website may be blocking access.' });
  }
});

app.listen(3000, () => console.log('Server running on http://localhost:3000'));

/*
    for better ui may use the following:

    catch (error) {
  console.error('Error fetching URL:', error.message);
  return res.status(500).json({ 
    error: 'Failed to fetch URL content. The website may be blocking automated access.'
  });
}

*/